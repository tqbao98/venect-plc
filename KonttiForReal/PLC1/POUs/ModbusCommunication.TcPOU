<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="ModbusCommunication" Id="{54342e5d-ff54-42da-bebd-97328cd56068}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ModbusCommunication
VAR
	aP1, aP2, aP3			: ARRAY [GrundfosRegAddress.listStart +1 ..GrundfosRegAddress.listEnd -1] OF WORD;
	wMBData					: ARRAY [ATV212RegAddress.listStart +1 .. ATV212RegAddress.listEnd -1] OF WORD;
	nStep					: INT := 0;
	wP1Control, wP2Control, wP3Control	: ARRAY [100..105] OF WORD := [
		16#0000,
		16#0080,
		0,
		0,
		0,
		600
	];
	wFeederControl			: ARRAY [16#FA00..16#FA01] OF WORD := [];
	wFeederControlAddress	: WORD;
	wP1Status, wP2Status, wP3Status	: ARRAY[200..220] OF WORD;
	wFeederStatus			: ARRAY[16#D01..16#E01] OF WORD;
	wContent				: WORD;
END_VAR

VAR CONSTANT
	bP1Addr					: BYTE := 2;
	bP2Addr					: BYTE := 4;
	bP3Addr					: BYTE := 6;
	bFeederAddr				: BYTE := 5;
	wStartPumpCmd			: WORD := 16#0027; //27
	wStopPumpCmd			: WORD := 16#0025; //25
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[HWVar.ModbusMaster.ReadRegs(Execute := FALSE);
HWVar.ModbusMaster.WriteRegs(Execute := FALSE);
HWVar.ModbusMaster1.ReadRegs(Execute := FALSE);
HWVar.ModbusMaster1.WriteRegs(Execute := FALSE);
IF GVL.bP1 THEN
               wP1Control[100] := wStartPumpCmd;
ELSE 
               wP1Control[100] := wStopPumpCmd;
END_IF
IF GVL.bP2 THEN
               wP2Control[100] := wStartPumpCmd;
ELSE 
               wP2Control[100] := wStopPumpCmd;
END_IF
IF GVL.bP3 THEN
               wP3Control[100] := wStartPumpCmd;
ELSE 
               wP3Control[100] := wStopPumpCmd;
END_IF

CASE nStep OF 
	0: 
		P1Read(); 
    1: 
        P2Read(); 
    2: 
        GrundfosDataConversion(arrReg:= aP1, pstGrundfosMagna3:= ADR(GVL.stP1)); 
        GrundfosDataConversion(arrReg:= aP2, pstGrundfosMagna3:= ADR(GVL.stP2));
        nStep := 3;
    3:
        P1Write();
    4:
        P2Write();
    5:
        P1ReadStatus();
    6:
        P2ReadStatus();
    7:
        FeederReadSingle();
    8:
        ATV212DataConversion(arrReg := wMBData, pstATV212 := ADR(GVL.stFeeder));
        nStep := 9;
    9:
        FeederControlRun();
	10: 
		FeederSpeedControl(wContent => wContent);
		FeederWrite(wContent, 16#FA01);
    11:
        FeederStatus();
        //nStep := 0;
	12:
		P3Read();
	13:
		GrundfosDataConversion(arrReg:= aP3, pstGrundfosMagna3:= ADR(GVL.stP3)); 
		nStep := 14;
	14:
		P3Write();
	15:
		P3ReadStatus();
END_CASE;
]]></ST>
    </Implementation>
    <Folder Name="DataConversion" Id="{7e9d04de-3f20-4227-ac15-fac24e614fcd}" />
    <Folder Name="Feeder" Id="{1e864ac5-d58e-4b0b-830d-53f953ff9d25}" />
    <Folder Name="P1" Id="{a83e4ea3-e537-49ef-a7b4-a1f2d14aa618}" />
    <Folder Name="P2" Id="{0ef8efc5-5e00-42d7-9f4d-bced7616a4be}" />
    <Folder Name="P3" Id="{db486fc1-5241-4f5f-8f25-7652a2436d6a}" />
    <Method Name="ATV212DataConversion" Id="{ce9fcc30-4df5-4b9c-8a85-a428ecc2d8c7}" FolderPath="DataConversion\">
      <Declaration><![CDATA[METHOD ATV212DataConversion : BOOL
VAR_INPUT
               arrReg   : ARRAY [ATV212RegAddress.listStart +1 .. ATV212RegAddress.listEnd -1] OF WORD;
               pstATV212           : POINTER TO ATV212;
END_VAR

VAR
			// iMemIndex: ATV212RegAddress;
			iMemIndex: WORD := ATV212RegAddress.listStart +1;
               a_MbRegValue  : ARRAY [ATV212RegAddress.listStart +1 .. ATV212RegAddress.listEnd -1] OF REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE (iMemIndex <=  ATV212RegAddress.listEnd) DO
	a_MbRegValue[iMemIndex] := (arrReg[iMemIndex])*Scale.fATV212Scale[iMemIndex];
    iMemIndex := iMemIndex + 1;
END_WHILE
MEMCPY(pstATV212, ADR(a_MbRegValue), SIZEOF(ATV212));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederControlRun" Id="{41e60fd5-d07e-4b1b-b684-fef6b25a1501}" FolderPath="Feeder\">
      <Declaration><![CDATA[METHOD FeederControlRun : BOOL
VAR_INPUT
END_VAR

VAR
	fbStartStop: RS;
	reStart: R_TRIG;
	wContent: WORD;
	wAddress: WORD;
	tmFeederOn: TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[wAddress := 16#FA00;

IF GVL.stFeederControl.bStart THEN
	IF gvl.stFeederControl.bForward THEN
		wContent := 16#C400;
		ELSE wContent := 16#C600;
	END_IF
	FeederWrite(wContent, wAddress);
ELSE
	wContent := 16#C000;
	gvl.stFeederControl.fFrequency := 0;
	FeederWrite(wContent, wAddress);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederReadSingle" Id="{087dd7a2-4d18-4f20-a629-8f15bc3e6957}" FolderPath="Feeder\">
      <Declaration><![CDATA[METHOD FeederReadSingle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bFeederAddr,
		Quantity := 4,
		MBAddr := 16#1875,
		cbLength := SIZEOF(wMBData),
		pMemoryAddr := ADR(wMBData),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 8;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederStatus" Id="{954db622-fd24-4190-936a-3ec3927809d4}" FolderPath="Feeder\">
      <Declaration><![CDATA[METHOD FeederStatus : BOOL
VAR_INPUT

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bFeederAddr,
		Quantity := 1,
		MBAddr := 16#FD00,
		cbLength := SIZEOF(wFeederStatus),
		pMemoryAddr := ADR(wFeederStatus),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 12;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeederWrite" Id="{2f47265f-2ad5-409f-b44a-d3a6fc003144}" FolderPath="Feeder\">
      <Declaration><![CDATA[METHOD FeederWrite : BOOL
VAR_INPUT
	wFeederControl: WORD;
	wFeederControlAddress: WORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bFeederAddr,
		Quantity := 1,
		MBAddr := wFeederControlAddress,
		cbLength := SIZEOF(WORD),
		pMemoryAddr := ADR(wFeederControl),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);	
	nStep := nStep+1;	
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GrundfosDataConversion" Id="{c1721abb-801a-40d2-a1fb-1b489e79040e}" FolderPath="DataConversion\">
      <Declaration><![CDATA[METHOD PUBLIC GrundfosDataConversion : BOOL
VAR_INPUT
	arrReg	: ARRAY [GrundfosRegAddress.listStart +1 ..GrundfosRegAddress.listEnd -1] OF WORD;
	pstGrundfosMagna3	: POINTER TO GrundfosMagna3;
END_VAR

VAR
	iMemIndex: WORD := GrundfosRegAddress.listStart +1;
	iRegIndex: WORD := GrundfosRegAddress.listStart +1;
	a_MbRegValue	: ARRAY [300..350] OF REAL;
	dwMergedReg		: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE (iMemIndex <  GrundfosRegAddress.listEnd AND iRegIndex < 351) DO
	IF (iRegIndex <> 311) 
		AND (iRegIndex <> 326)
		AND (iRegIndex <> 328) 
		AND (iRegIndex <> 331)
		AND (iRegIndex <> 333)
		AND (iRegIndex <> 342)
		AND (iRegIndex <> 351)
		AND (iRegIndex <> 353)
		AND (iRegIndex <> 356)
		AND (iRegIndex <> 358)
		AND (iRegIndex <> 360) THEN
		a_MbRegValue[iRegIndex] := (arrReg[iMemIndex])*Scale.fGrundfosScale[iRegIndex];
		iMemIndex := iMemIndex + 1;
		iRegIndex := iRegIndex + 1;
	ELSE
		dwMergedReg := SHL(WORD_TO_DWORD(arrReg[iMemIndex]),16) OR WORD_TO_DWORD(arrReg[iMemIndex+1]);
		a_MbRegValue[iRegIndex] := (DWORD_TO_REAL(dwMergedReg))*Scale.fGrundfosScale[iRegIndex];
		iMemIndex := iMemIndex + 2;
		iRegIndex := iRegIndex + 1;
	END_IF
END_WHILE
MEMCPY(pstGrundfosMagna3, ADR(a_MbRegValue), SIZEOF(GrundfosMagna3));]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1Read" Id="{c73de48b-54bb-496d-9d86-0a4cfa2e1c2d}" FolderPath="P1\">
      <Declaration><![CDATA[METHOD PRIVATE P1Read : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP1Addr,
		Quantity := 61,
		MBAddr := 300,
		cbLength := SIZEOF(aP1),
		pMemoryAddr := ADR(aP1),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 1;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1ReadStatus" Id="{e940be54-64b5-4d76-a9c5-9116d1bfcb8d}" FolderPath="P1\">
      <Declaration><![CDATA[METHOD PRIVATE P1ReadStatus : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP1Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP1Status),
		pMemoryAddr := ADR(wP1Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 6;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P1Write" Id="{8455cd7a-6f3b-4703-a7c5-04d6e9cb6cc9}" FolderPath="P1\">
      <Declaration><![CDATA[METHOD PRIVATE P1Write : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bP1Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP1Control),
		pMemoryAddr := ADR(wP1Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 4;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2Read" Id="{ff14c237-e459-4ec9-871d-74c9239e39c7}" FolderPath="P2\">
      <Declaration><![CDATA[METHOD PRIVATE P2Read : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP2Addr,
		Quantity := 61,
		MBAddr := 300,
		cbLength := SIZEOF(aP2),
		pMemoryAddr := ADR(aP2),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 2;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2ReadStatus" Id="{3caf89c1-a318-494c-aba5-1c31ed772b4f}" FolderPath="P2\">
      <Declaration><![CDATA[METHOD PRIVATE P2ReadStatus : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.ReadRegs(
		UnitID := bP2Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP2Status),
		pMemoryAddr := ADR(wP2Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 7;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P2Write" Id="{ef6bb6ba-d829-4627-81b3-f21a4dbedaa5}" FolderPath="P2\">
      <Declaration><![CDATA[METHOD PRIVATE P2Write : BOOL
VAR_STAT
	nRegisterAddress	: GrundfosRegAddress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster.BUSY) THEN
	HWVar.ModbusMaster.WriteRegs(
		UnitID := bP2Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP2Control),
		pMemoryAddr := ADR(wP2Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 5;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P3Read" Id="{20863679-6f80-4e07-9a2c-a5c49a3c25ea}" FolderPath="P3\">
      <Declaration><![CDATA[METHOD P3Read : BOOL
VAR_INPUT
END_VAR

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster1.BUSY) THEN
	HWVar.ModbusMaster1.ReadRegs(
		UnitID := bP3Addr,
		Quantity := 61,
		MBAddr := 300,
		cbLength := SIZEOF(aP3),
		pMemoryAddr := ADR(aP3),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 13;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P3ReadStatus" Id="{686d1587-7ed6-4dae-8bcd-548a0053d1cf}" FolderPath="P3\">
      <Declaration><![CDATA[METHOD P3ReadStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster1.BUSY) THEN
	HWVar.ModbusMaster1.ReadRegs(
		UnitID := bP3Addr,
		Quantity := 21,
		MBAddr := 200,
		cbLength := SIZEOF(wP3Status),
		pMemoryAddr := ADR(wP3Status),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 0;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="P3Write" Id="{98baa8b5-bf22-4f03-9132-c2f236c3fc26}" FolderPath="P3\">
      <Declaration><![CDATA[METHOD P3Write : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT HWVar.ModbusMaster1.BUSY) THEN
	HWVar.ModbusMaster1.WriteRegs(
		UnitID := bP3Addr,
		Quantity := 6,
		MBAddr := 100,
		cbLength := SIZEOF(wP3Control),
		pMemoryAddr := ADR(wP3Control),
		Execute := TRUE,
		Timeout := T#5S,
		BUSY => ,
		Error =>
		);
		nStep := 15;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Action Name="SC01Read" Id="{8e355383-73d5-444b-a223-41e8c10c9f5c}">
      <Implementation>
        <ST><![CDATA[nStep := 3;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="ModbusCommunication">
      <LineId Id="687" Count="1" />
      <LineId Id="822" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="689" Count="9" />
      <LineId Id="823" Count="3" />
      <LineId Id="699" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="700" Count="23" />
      <LineId Id="725" Count="0" />
      <LineId Id="727" Count="4" />
      <LineId Id="787" Count="2" />
      <LineId Id="791" Count="1" />
      <LineId Id="827" Count="3" />
      <LineId Id="733" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.ATV212DataConversion">
      <LineId Id="16" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederControlRun">
      <LineId Id="53" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederReadSingle">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederStatus">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.FeederWrite">
      <LineId Id="6" Count="11" />
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.GrundfosDataConversion">
      <LineId Id="7" Count="1" />
      <LineId Id="26" Count="5" />
      <LineId Id="33" Count="3" />
      <LineId Id="9" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1Read">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1ReadStatus">
      <LineId Id="25" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P1Write">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2Read">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2ReadStatus">
      <LineId Id="7" Count="10" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P2Write">
      <LineId Id="25" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P3Read">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P3ReadStatus">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.P3Write">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ModbusCommunication.SC01Read">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>